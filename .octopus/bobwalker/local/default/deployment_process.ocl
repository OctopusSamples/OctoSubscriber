step "AWS - Deploy Accept Message Lambda Function" {

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Redeploy**
                
                Deploys the Accept Message Lambda function for the OctoSubscriber application.
            EOT
        properties = {
            AWS.Lambda.Account = "Project.AWS.Account"
            AWS.Lambda.Description = "Function to accept subscriber messages from an Octopus Server and put them on a queue"
            AWS.Lambda.EnvironmentVariables = "sqsqueue=#{Project.AWS.Queue.Url},sqsregion=#{Project.AWS.Region}"
            AWS.Lambda.FunctionHandler = "index.handler"
            AWS.Lambda.FunctionName = "#{Project.AWS.Lambda.AcceptMessage.FunctionName}"
            AWS.Lambda.FunctionRole = "#{Project.AWS.Lamba.Role.ARN}"
            AWS.Lambda.MemorySize = "128"
            AWS.Lambda.Package = "{\"PackageId\":\"OctoSubscriber-AcceptMessage-Lambda\",\"FeedId\":\"Octopus Server (built-in)\"}"
            AWS.Lambda.Publish = "Yes"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            AWS.Lambda.Runtime = "nodejs14.x"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-702"
            Octopus.Action.Template.Version = "5"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopuslabs/aws-workertools:latest"
        }

        packages "AWS.Lambda.Package" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoSubscriber-AcceptMessage-Lambda"
            properties = {
                Extract = "False"
                PackageParameterName = "AWS.Lambda.Package"
                SelectionMode = "deferred"
            }
        }
    }
}

step "AWS - Deploy Process Message Lambda Function" {

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Redeploy**
                
                Deploys the Accept Message Lambda function for the OctoSubscriber application.
            EOT
        properties = {
            AWS.Lambda.Account = "Project.AWS.Account"
            AWS.Lambda.Description = "Function to accept subscriber messages from an Octopus Server and put them on a queue"
            AWS.Lambda.EnvironmentVariables = "OCTOPUS_SERVER_URL=#{Global.Base.Url},OCTOPUS_API_KEY=#{Global.Api.Key}"
            AWS.Lambda.FunctionHandler = "process_message::process_message.Function::FunctionHandler"
            AWS.Lambda.FunctionName = "#{Project.AWS.Lambda.ProcessMessage.FunctionName}"
            AWS.Lambda.FunctionRole = "#{Project.AWS.Lamba.Role.ARN}"
            AWS.Lambda.FunctionTimeout = "30"
            AWS.Lambda.MemorySize = "128"
            AWS.Lambda.Package = "{\"PackageId\":\"OctoSubscriber-ProcessMessage-Lambda\",\"FeedId\":\"Octopus Server (built-in)\"}"
            AWS.Lambda.Publish = "Yes"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            AWS.Lambda.Runtime = "dotnetcore3.1"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-702"
            Octopus.Action.Template.Version = "5"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopuslabs/aws-workertools:latest"
        }

        packages "AWS.Lambda.Package" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoSubscriber-ProcessMessage-Lambda"
            properties = {
                Extract = "False"
                PackageParameterName = "AWS.Lambda.Package"
                SelectionMode = "deferred"
            }
        }
    }
}

step "AWS - Configure Accept Message Lambda Alias" {

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Updates the Live alias in the Accept Message Lambda function to send a certain traffic percent to the latest version.
            EOT
        properties = {
            AWS.Lambda.Account = "Project.AWS.Account"
            AWS.Lambda.Alias.FunctionVersion = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.PublishedVersion}"
            AWS.Lambda.Alias.Name = "Live"
            AWS.Lambda.Alias.Percent = "100"
            AWS.Lambda.Function.Name = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.LambdaArn}"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1862"
            Octopus.Action.Template.Version = "1"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}

step "AWS - Configure Process Message Lambda Alias" {

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Updates the Live alias in the Process Message Lambda function to send a certain traffic percent to the latest version.
            EOT
        properties = {
            AWS.Lambda.Account = "Project.AWS.Account"
            AWS.Lambda.Alias.FunctionVersion = "#{Octopus.Action[AWS - Deploy Process Message Lambda Function].Output.PublishedVersion}"
            AWS.Lambda.Alias.Name = "Live"
            AWS.Lambda.Alias.Percent = "100"
            AWS.Lambda.Function.Name = "#{Octopus.Action[AWS - Deploy Process Message Lambda Function].Output.LambdaArn}"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1862"
            Octopus.Action.Template.Version = "1"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}

step "AWS - Configure Lambda API Gateway Integration" {

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Creates the API gateway integration if it does not already exist.
            EOT
        properties = {
            AWS.Api.Gateway.Account = "Project.AWS.Account"
            AWS.Api.Gateway.Integration.HttpMethod = "ANY"
            AWS.Api.Gateway.Integration.PayloadFormatVersion = "2.0"
            AWS.Api.Gateway.Lambda.Alias = "Live"
            AWS.Api.Gateway.Lambda.Arn = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.LambdaArn}"
            AWS.Api.Gateway.Name = "#{Project.AWS.API.Gateway.Name}"
            AWS.Api.Gateway.Region = "#{Project.AWS.Region}"
            AWS.Api.Gateway.Route.Key = "/octopus/webhook"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1863"
            Octopus.Action.Template.Version = "1"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}